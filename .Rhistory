"Median:", round(Time_spent_Median, 2), "\n",
"SD:", round(Time_spent_Standard_deviation, 2), "\n",
"Min:", min_time_spent, "\n",
"Max:", max_time_spent)) +
facet_wrap(~ gender) # Solution to lack of trends - we compare between countries!
#Mean for time spent value
Time_spent_Mean <- mean(dataset.df$time_spent)
Time_spent_Mean
#Median for time spent value
Time_spent_Median <- median(dataset.df$time_spent)
Time_spent_Median
#Standard deviation for time spent value
Time_spent_Standard_deviation <- sd(dataset.df$time_spent)
Time_spent_Standard_deviation
#range for time spent value
Time_spent_range <- range(dataset.df$time_spent)
Time_spent_range
# Min Max
min_time_spent <- min(dataset.df$time_spent)
max_time_spent <- max(dataset.df$time_spent)
#quartiles for time spent value
Time_spent_quartiles <- quantile(dataset.df$time_spent)
Time_spent_quartiles
#use summary() function to double check the result
summary(dataset.df$time_spent)
# Use this instead of Standard Deviation? - Histogram and density curve of Time Spent
# Note:  the density values on the y-axis of a density plot is the probabilty of observing data points at different values along the time spent x-axis
ggplot(dataset.df, aes(x = time_spent)) +
geom_histogram(binwidth = 1, color = "black", aes(y = ..density.., fill = ..count..), alpha = 0.5) +
geom_density(alpha = 1, color = "blue") + # Density curve, look at peak and tails
labs(x = "Time Spent", y = "Density") +
scale_x_continuous(breaks = seq(min(dataset.df$time_spent), max(dataset.df$time_spent), by = 1)) + # show all time spent values on x (1-9)
scale_fill_gradient(low = "green", high = "red") +
ggtitle("Histogram with Density Curve for Time Spent") +
annotate("text", x = Inf, y = Inf, hjust = 1, vjust = 1, # Add descriptive statistics: mean, median etc to the histogram
label = paste("Mean:", round(Time_spent_Mean, 2), "\n",
"Median:", round(Time_spent_Median, 2), "\n",
"SD:", round(Time_spent_Standard_deviation, 2), "\n",
"Min:", min_time_spent, "\n",
"Max:", max_time_spent)) +
facet_wrap(~ gender) # Solution to lack of trends - we compare between countries!
View(dataset.df)
# Use this instead of Standard Deviation? - Histogram and density curve of Time Spent
# Note:  the density values on the y-axis of a density plot is the probabilty of observing data points at different values along the time spent x-axis
ggplot(dataset.df, aes(x = time_spent)) +
geom_histogram(binwidth = 1, color = "black", aes(y = ..density.., fill = ..count..), alpha = 0.5) +
geom_density(alpha = 1, color = "blue") + # Density curve, look at peak and tails
labs(x = "Time Spent", y = "Density") +
scale_x_continuous(breaks = seq(min(dataset.df$time_spent), max(dataset.df$time_spent), by = 1)) + # show all time spent values on x (1-9)
scale_fill_gradient(low = "green", high = "red") +
ggtitle("Histogram with Density Curve for Time Spent") +
annotate("text", x = Inf, y = Inf, hjust = 1, vjust = 1, # Add descriptive statistics: mean, median etc to the histogram
label = paste("Mean:", round(Time_spent_Mean, 2), "\n",
"Median:", round(Time_spent_Median, 2), "\n",
"SD:", round(Time_spent_Standard_deviation, 2), "\n",
"Min:", min_time_spent, "\n",
"Max:", max_time_spent)) +
facet_wrap(~ platform) # Solution to lack of trends - we compare between countries!
platform_time_spent <- aggregate(time_spent ~ platform, data = dataset.df, FUN = mean)
#Bar parplot vs platform
Average_time_barplot <- ggplot(platform_time_spent, aes(x = platform, y = time_spent, fill = platform)) +
geom_bar(stat = "identity") +
labs(title = "Average Time Spent on Social Media by Platform",
x = "Platform",
y = "Time Spent (hours)") + theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"), #center the title, front size to 20 and bold
axis.text = element_text(colour = "brown", size = 10, face = "bold"), #color the x and y label, front size to 10 and bold
axis.title.x = element_text(size = 15, face = "bold"), #front size 15 and bold the x title
axis.title.y = element_text(size = 15, face = "bold")) #front size 15 and bold the y title
Average_time_barplot
time_spent_count <- table(dataset.df$time_spent)
#basic bar plot
barplot(time_spent_count)
#bar plot to show the average time spent by different gender identities
average_plot <- ggplot(data= dataset.df, aes( x = gender,y = time_spent)) +
stat_summary(fun = "mean", geom = "bar", fill = c("blue","red","orange"), color = "black", alpha = 0.6) +
labs(title = "Average Time Spent by Gender", x = "Gender", y = "Average Time Spent")
average_plot
install.packages("reshape2")
# Loading from the library
library(reshape2)
# Preparing the dataset
dataset.melt <- melt(dataset.df)
# Calculating average time spent by gender
avg_time_spent <- aggregate(time_spent ~ gender, dataset.df, mean)
# Convert the data to long format for the heatmap
avg_time_spent_long <- reshape2::melt(avg_time_spent, id.vars = "gender")
# Creating a heatmap
ggplot(avg_time_spent_long, aes(x = gender, y = variable, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "yellow", high = "blue") +
labs(title = "Heatmap of Average Time Spent by Gender",
x = "Gender",
y = "Time Spent",
fill = "Average Time Spent")
# Calculating average time spent by gender
avg_time_spent <- aggregate(time_spent ~ income, dataset.df, mean)
# Convert the data to long format for the heatmap
avg_time_spent_long <- reshape2::melt(avg_time_spent, id.vars = "gender")
# Convert the data to long format for the heatmap
avg_time_spent_long <- reshape2::melt(avg_time_spent, id.vars = "income")
# Creating a heatmap
ggplot(avg_time_spent_long, aes(x = gender, y = variable, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "yellow", high = "blue") +
labs(title = "Heatmap of Average Time Spent by Gender",
x = "Gender",
y = "Time Spent",
fill = "Average Time Spent")
# Creating a heatmap
ggplot(avg_time_spent_long, aes(x = income, y = variable, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "yellow", high = "blue") +
labs(title = "Heatmap of Average Time Spent by Gender",
x = "Gender",
y = "Time Spent",
fill = "Average Time Spent")
ggplot(data = dataset1, mapping = aes(x=income_group, y=avg_time, color=profession, group = profession)) +
geom_line() + geom_point() +
labs(title = "Average Time Spent on Social Media by Income Group, by Profession",  x = "Income Group", y = "Average Time Spent")
#(Frances)average time spent in different income groups by prefession
# group the income
dataset.df$income_group <- cut(dataset.df$income, breaks = c(10012, 12512, 15012, 17512, 19980), include.lowest = TRUE, right = FALSE,
labels = c("10012-12511", "12512-15011", "15012-17511", "17512-19980"))
ggplot(data = dataset1, mapping = aes(x=income_group, y=avg_time, color=profession, group = profession)) +
geom_line() + geom_point() +
labs(title = "Average Time Spent on Social Media by Income Group, by Profession",  x = "Income Group", y = "Average Time Spent")
#group a new dataset, %>% is a chain operator to chain together multiple operations
#The .groups = "drop" argument ensures that the grouping is dropped after summarization to avoid issues with plotting.
dataset1 <- dataset.df %>% group_by(profession, income_group) %>% summarize(avg_time = mean(time_spent), .groups = 'drop')
ggplot(data = dataset1, mapping = aes(x=income_group, y=avg_time, color=profession, group = profession)) +
geom_line() + geom_point() +
labs(title = "Average Time Spent on Social Media by Income Group, by Profession",  x = "Income Group", y = "Average Time Spent")
#(Frances)average time spent in different income groups by prefession
# group the income
dataset.df$income_group <- cut(dataset.df$income, breaks = c(10000, 12500, 15000, 17500, 20000), include.lowest = TRUE, right = FALSE,
labels = c("10000-12500", "12500-15000", "15000-17500", "17500-20000"))
#group a new dataset, %>% is a chain operator to chain together multiple operations
#The .groups = "drop" argument ensures that the grouping is dropped after summarization to avoid issues with plotting.
dataset1 <- dataset.df %>% group_by(profession, income_group) %>% summarize(avg_time = mean(time_spent), .groups = 'drop')
ggplot(data = dataset1, mapping = aes(x=income_group, y=avg_time, color=profession, group = profession)) +
geom_line() + geom_point() +
labs(title = "Average Time Spent on Social Media by Income Group, by Profession",  x = "Income Group", y = "Average Time Spent")
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 10, fill = "green", color = "black") +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 1000, fill = "green", color = "black") +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 1000, fill = "green", color = "black") +
scale_x_continuous(breaks = seq(min(dataset.df$time_spent), max(dataset.df$time_spent), by = 1000)) +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 1000, fill = "green", color = "black") +
scale_x_continuous(breaks = seq(min(dataset.df$income), max(dataset.df$income), by = 1)) +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 1000, fill = "green", color = "black") +
scale_x_continuous(breaks = seq(min(dataset.df$income), max(dataset.df$income), by = 1000)) +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
#(Frances)average time spent in different income groups by prefession
# group the income
dataset.df$income_group <- cut(dataset.df$income, breaks = c(10000, 12500, 15000, 17500, 20000), include.lowest = TRUE, right = FALSE,
labels = c("10000-12500", "12500-15000", "15000-17500", "17500-20000"))
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 1000, fill = "green", color = "black") +
scale_x_continuous(breaks = seq(min(dataset.df$income_group), max(dataset.df$income_group), by = 1000)) +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 1000, fill = "green", color = "black") +
scale_x_continuous(breaks = seq(min(dataset.df$income_group), max(dataset.df$income_group), by = 1000)) +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
# Creating a histogram for each numerical column in the dataset
for(col in names(dataset.df)) {
# Check if the column is numerical
if(is.numeric(dataset.df[[col]])) {
# Create a histogram
p <- ggplot(dataset.df, aes_string(col)) +
geom_histogram(binwidth = 1000, fill = "green", color = "black") +
scale_x_continuous(breaks = seq(min(dataset.df$income), max(dataset.df$income), by = 1000)) +
labs(title = paste("Histogram of", col),
x = col,
y = "Frequency")
print(p)
}
}
ggplot(data = dataset1, mapping = aes(x=income_group, y=avg_time, color=profession, group = profession)) +
geom_line() + geom_point() +
labs(title = "Average Time Spent on Social Media by Income Group, by Profession",  x = "Income Group", y = "Average Time Spent")
dataset_subset <- subset(dataset.df, gender %in% c("male", "female", "non-binary"))
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent")
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~location)
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~interests)
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~indebt)
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~isHomeOwner)
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~isHomeOwner)
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "black") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~isHomeOwner)
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~isHomeOwner)
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~isHomeOwner)
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap
Time_Gender_Age_heatmap <- ggplot(data = dataset_subset, aes(x = gender , y = age)) +
geom_tile(aes(fill = time_spent))+
scale_fill_gradient(low = "white", high = "darkgreen") +
labs(title = "Heatmap of Time spent by Gender and Age",
x = "Gender",
y = "Age (years)",
fill = "Time spent") +
facet_wrap(~demographics)
Time_Gender_Age_heatmap
######### Participants chart
# Count the number of participants from each country
participant_count <- table(dataset.df$location)
# Convert the participant count to a data frame
participant_count_df <- data.frame(
country = names(participant_count),
count = as.numeric(participant_count)
)
# Create a bar chart
ggplot(participant_count_df, aes(x = country, y = count, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Number of Participants by Country", x = "Country", y = "Number of Participants") +
theme(legend.position = "none")
participant_count
# Convert the participant count to a data frame
participant_count_df <- data.frame(
country = names(participant_count),
count = as.numeric(participant_count)
)
# Create a bar chart
ggplot(participant_count_df, aes(x = country, y = count, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Number of Participants by Country", x = "Country", y = "Number of Participants") +
theme(legend.position = "none")
Average_time_barplot
stacked_bar_plot
average_plot <- ggplot(data= dataset.df, aes( x = gender,y = time_spent)) +
stat_summary(fun = "mean", geom = "bar", fill = c("blue","red","orange"), color = "black", alpha = 0.6) +
labs(title = "Average Time Spent by Gender", x = "Gender", y = "Average Time Spent")
average_plot
# make text appear on top of the bars
#(Frances) stacked bar plot of average time spent by location and Platform
# to show the relationship among average time, location (3 countries), and platform.
# got a problem here, the number of y axis seems wrong!!!!!!!!!!!
Time_spent_Mean <- mean(dataset.df$time_spent)
stacked_bar_plot <- ggplot(data= dataset.df, aes(x = location, y = Time_spent_Mean, fill = platform)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Time Spent by Location and Platform on Social Media",
x = "Location", y = "Average Time Spent")
stacked_bar_plot <- ggplot(data= dataset.df, aes(x = location, y = Time_spent_Mean, fill = platform)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Time Spent by Location and Platform on Social Media",
x = "Location", y = "Average Time Spent")
stacked_bar_plot
# Create a bar chart
ggplot(participant_count_df, aes(x = country, y = count, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Number of Participants by Country", x = "Country", y = "Number of Participants") +
theme(legend.position = "none")
stacked_bar_plot <- ggplot(data= dataset.df, aes(x = location, y = time_spent, fill = platform)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Average Time Spent by Location and Platform on Social Media",
x = "Location", y = "Average Time Spent")
stacked_bar_plot
stacked_bar_plot <- ggplot(data= dataset.df, aes(x = location, y = time_spent, fill = platform)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Total Time Spent by Location and Platform on Social Media",
x = "Location", y = "Total Time Spent")
stacked_bar_plot
# Create a bar chart
ggplot(participant_count_df, aes(x = country, y = count, fill = country)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Number of Participants by Country", x = "Country", y = "Number of Participants") +
theme(legend.position = "none")
# Calculate percentage of time spent for each location and platform
pie.df <- dataset.df %>%
group_by(location, platform) %>%
summarize(total_time = sum(time_spent)) %>%
mutate(percentage = total_time / sum(total_time) * 100)
# Create pie charts
Time_Platform_Location_piechart <- ggplot(pie.df, aes(x = "", y = percentage, fill = platform)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y") +
facet_wrap(~location) +
theme_void() +
theme(legend.position = "bottom") +
labs(title = "Percentage of Time Spent on Platforms by Location", fill = "Platform") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_stack(vjust = 0.5))
Time_Platform_Location_piechart
ggplot(dataset.df, aes(x = time_spent)) +
geom_histogram(binwidth = 1, color = "black", aes(y = ..density.., fill = ..count..), alpha = 0.5) +
geom_density(alpha = 1, color = "blue") + # Density curve, look at peak and tails
labs(x = "Time Spent", y = "Density") +
scale_x_continuous(breaks = seq(min(dataset.df$time_spent), max(dataset.df$time_spent), by = 1)) + # show all time spent values on x (1-9)
scale_fill_gradient(low = "green", high = "red") +
ggtitle("Histogram with Density Curve for Time Spent") +
annotate("text", x = Inf, y = Inf, hjust = 1, vjust = 1, # Add descriptive statistics: mean, median etc to the histogram
label = paste("Mean:", round(Time_spent_Mean, 2), "\n",
"Median:", round(Time_spent_Median, 2), "\n",
"SD:", round(Time_spent_Standard_deviation, 2), "\n",
"Min:", min_time_spent, "\n",
"Max:", max_time_spent)) +
facet_wrap(~ location) # Solution to lack of trends - we compare between countries!
Average_time_barplot <- ggplot(platform_time_spent, aes(x = platform, y = time_spent, fill = platform)) +
geom_bar(stat = "identity") +
labs(title = "Average Time Spent on Social Media by Platform",
x = "Platform",
y = "Time Spent (hours)") + theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"), #center the title, front size to 20 and bold
axis.text = element_text(colour = "brown", size = 10, face = "bold"), #color the x and y label, front size to 10 and bold
axis.title.x = element_text(size = 15, face = "bold"), #front size 15 and bold the x title
axis.title.y = element_text(size = 15, face = "bold")) #front size 15 and bold the y title
Average_time_barplot
dataset.df$age_group <- cut(dataset.df$age, breaks = c(18, 28, 38, 48, 58, 64), include.lowest = TRUE, right = FALSE,
labels = c("18-27", "28-37", "38-47", "48-57", "58-64"))
# Boxplot age vs time spent
ggplot(dataset.df, aes(x = factor(dataset.df$age_group), y = time_spent)) +
geom_boxplot(aes(fill = factor(dataset.df$age_group))) + # Fill color by age
scale_fill_viridis_d() +
theme_minimal() +
labs(
title = "Boxplot of Time Spent per Day by Age",
x = "Age",
y = "Time Spent",
fill = "Age Group"
) +
theme(
plot.title = element_text(hjust = 0.5), # Center the plot title
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom" # Position the legend at the bottom
)
# Boxplot age vs time spent
ggplot(dataset.df, aes(x = factor(dataset.df$age), y = time_spent)) +
geom_boxplot(aes(fill = factor(dataset.df$age))) + # Fill color by age
scale_fill_viridis_d() +
theme_minimal() +
labs(
title = "Boxplot of Time Spent per Day by Age",
x = "Age",
y = "Time Spent",
fill = "Age Group"
) +
theme(
plot.title = element_text(hjust = 0.5), # Center the plot title
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom" # Position the legend at the bottom
)
# Boxplot age vs time spent
ggplot(dataset.df, aes(x = factor(dataset.df$age_group), y = time_spent)) +
geom_boxplot(aes(fill = factor(dataset.df$age_group))) + # Fill color by age
scale_fill_viridis_d() +
theme_minimal() +
labs(
title = "Boxplot of Time Spent per Day by Age",
x = "Age",
y = "Time Spent",
fill = "Age Group"
) +
theme(
plot.title = element_text(hjust = 0.5), # Center the plot title
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom" # Position the legend at the bottom
)
source("~/GitHub/Assignment1-DS6502/RScript.R")
install.packages("reshape2")
install.packages("dplyr")
install.packages("ggplot2")
source("~/GitHub/Assignment1-DS6502/RScript.R")
install.packages("reshape2")
source("~/GitHub/Assignment1-DS6502/RScript.R")
